
230818FND_Button_4digit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000004ac  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  0000054a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f68  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b65  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000689  00000000  00000000  00002129  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000027b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a9  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e4  00000000  00000000  00002ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000032a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	91 c1       	rjmp	.+802    	; 0x364 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	79 d1       	rcall	.+754    	; 0x3b6 <main>
  c4:	f1 c1       	rjmp	.+994    	; 0x4a8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Button_init>:
	Button *button, 
	volatile uint8_t *ddr, 
	volatile uint8_t *pin,
	uint8_t pinNum )
	 
	{	button->ddr=ddr;
  c8:	fc 01       	movw	r30, r24
  ca:	71 83       	std	Z+1, r23	; 0x01
  cc:	60 83       	st	Z, r22
		button->pin=pin;
  ce:	53 83       	std	Z+3, r21	; 0x03
  d0:	42 83       	std	Z+2, r20	; 0x02
		button->btnPin=pinNum;
  d2:	24 83       	std	Z+4, r18	; 0x04
		button->prevState=RELEASED; //초기화 상태
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	85 83       	std	Z+5, r24	; 0x05
		*button->ddr&=~(1<<button->btnPin); //버튼 핀 입력 설정
  d8:	fb 01       	movw	r30, r22
  da:	30 81       	ld	r19, Z
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <Button_init+0x1e>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	2a 95       	dec	r18
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <Button_init+0x1a>
  ea:	80 95       	com	r24
  ec:	83 23       	and	r24, r19
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <BUTTON_fetState>:
	}

uint8_t BUTTON_fetState(Button *button){
  f2:	fc 01       	movw	r30, r24
	uint8_t curState=*button->pin&(1<<button->btnPin); //버튼 상태 읽어오기
  f4:	a2 81       	ldd	r26, Z+2	; 0x02
  f6:	b3 81       	ldd	r27, Z+3	; 0x03
  f8:	8c 91       	ld	r24, X
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	04 80       	ldd	r0, Z+4	; 0x04
 100:	02 c0       	rjmp	.+4      	; 0x106 <BUTTON_fetState+0x14>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <BUTTON_fetState+0x10>
 10a:	28 23       	and	r18, r24
	if((curState==PUSHED)&&(button->prevState==RELEASED)){  // enum{PUSHED,RELEASED}; // 0 1
 10c:	71 f4       	brne	.+28     	; 0x12a <BUTTON_fetState+0x38>
 10e:	85 81       	ldd	r24, Z+5	; 0x05
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	59 f4       	brne	.+22     	; 0x12a <BUTTON_fetState+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	30 e7       	ldi	r19, 0x70	; 112
 118:	92 e0       	ldi	r25, 0x02	; 2
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	30 40       	sbci	r19, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <BUTTON_fetState+0x28>
 122:	00 c0       	rjmp	.+0      	; 0x124 <BUTTON_fetState+0x32>
 124:	00 00       	nop
		_delay_ms(50); //디바운스 코드
		button->prevState=PUSHED; // 버튼을 누른상태로 변환
 126:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSH; //  enum 1
 128:	08 95       	ret
	}
	
	else if((curState !=PUSHED)&&(button->prevState==PUSHED)) //누른 상태에서 때면
 12a:	22 23       	and	r18, r18
 12c:	81 f0       	breq	.+32     	; 0x14e <BUTTON_fetState+0x5c>
 12e:	85 81       	ldd	r24, Z+5	; 0x05
 130:	81 11       	cpse	r24, r1
 132:	0f c0       	rjmp	.+30     	; 0x152 <BUTTON_fetState+0x60>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	30 e7       	ldi	r19, 0x70	; 112
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	30 40       	sbci	r19, 0x00	; 0
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <BUTTON_fetState+0x48>
 142:	00 c0       	rjmp	.+0      	; 0x144 <BUTTON_fetState+0x52>
 144:	00 00       	nop
	{	_delay_ms(50);
		button->prevState=RELEASED;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED; // enum 2 버튼이 떨어졌음을 반환
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	08 95       	ret
	}
	return NO_ACT; // enum 0 아무것도 안했을때
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	08 95       	ret
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret

00000156 <FND_Init>:

void FND_Init(){
	//TCCR0|=(1<<CS02)|(0<<CS01)|(0<<CS00);  //64분주   1/64 prescaler 
	//TIMSK|=(1<<TOIE0);  //타이머 카운트 오버플로우 enable 
	//TCNT0=6; //1ms만들기 위해 
	FND_DIGIT_DDR|=(1<<FND_DIGIT_1)|(1<<FND_DIGIT_2)|(1<<FND_DIGIT_3)|(1<<FND_DIGIT_4);	
 156:	e4 e6       	ldi	r30, 0x64	; 100
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8f 60       	ori	r24, 0x0F	; 15
 15e:	80 83       	st	Z, r24
	FND_DATA_DDR=0xFF; 
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	84 bb       	out	0x14, r24	; 20
 164:	08 95       	ret

00000166 <FND_setFndDisplayData>:
}

void FND_setFndDisplayData(uint16_t data)
{	if(data>=10000) //세그먼트에 9999까지 표기 
 166:	80 31       	cpi	r24, 0x10	; 16
 168:	27 e2       	ldi	r18, 0x27	; 39
 16a:	92 07       	cpc	r25, r18
 16c:	10 f0       	brcs	.+4      	; 0x172 <FND_setFndDisplayData+0xc>
	{	data=9999;
 16e:	8f e0       	ldi	r24, 0x0F	; 15
 170:	97 e2       	ldi	r25, 0x27	; 39
		//fndDisplayData=data;	
	}
	fndDisplayData=data;
 172:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <fndDisplayData+0x1>
 176:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <fndDisplayData>
 17a:	08 95       	ret

0000017c <FND_getFndDisplayData>:
}

uint16_t FND_getFndDisplayData()
{	return fndDisplayData; //변수에 저장된 데이터 반환 	
}
 17c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <fndDisplayData>
 180:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <fndDisplayData+0x1>
 184:	08 95       	ret

00000186 <FND_selectDigit>:

void FND_selectDigit(uint8_t digit) //자릿수 선택 
{	FND_DIGIT_PORT|=0xf0;
 186:	e5 e6       	ldi	r30, 0x65	; 101
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	90 81       	ld	r25, Z
 18c:	90 6f       	ori	r25, 0xF0	; 240
 18e:	90 83       	st	Z, r25
	FND_DIGIT_PORT=~(1<<digit);	
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <FND_selectDigit+0x14>
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	8a 95       	dec	r24
 19c:	e2 f7       	brpl	.-8      	; 0x196 <FND_selectDigit+0x10>
 19e:	20 95       	com	r18
 1a0:	20 83       	st	Z, r18
 1a2:	08 95       	ret

000001a4 <fnd_showNumber>:
}

void fnd_showNumber(uint8_t fndNumber)
{	uint8_t fndFont[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x27,0x7f,0x67};
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	2a 97       	sbiw	r28, 0x0a	; 10
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
 1b8:	9a e0       	ldi	r25, 0x0A	; 10
 1ba:	e0 e0       	ldi	r30, 0x00	; 0
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	de 01       	movw	r26, r28
 1c0:	11 96       	adiw	r26, 0x01	; 1
 1c2:	01 90       	ld	r0, Z+
 1c4:	0d 92       	st	X+, r0
 1c6:	9a 95       	dec	r25
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <fnd_showNumber+0x1e>
	FND_DATA_PORT=fndFont[fndNumber];
 1ca:	e1 e0       	ldi	r30, 0x01	; 1
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	ec 0f       	add	r30, r28
 1d0:	fd 1f       	adc	r31, r29
 1d2:	e8 0f       	add	r30, r24
 1d4:	f1 1d       	adc	r31, r1
 1d6:	80 81       	ld	r24, Z
 1d8:	85 bb       	out	0x15, r24	; 21
}
 1da:	2a 96       	adiw	r28, 0x0a	; 10
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <FND_off>:

void FND_off(){	FND_DIGIT_PORT|=0xff;	}
 1ec:	e5 e6       	ldi	r30, 0x65	; 101
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	80 83       	st	Z, r24
 1f6:	08 95       	ret

000001f8 <FND_ISR_Display>:
void FND_ISR_Display()
{	static uint8_t fndDigitPosition=0;
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
	uint16_t displayData=FND_getFndDisplayData();
 1fc:	bf df       	rcall	.-130    	; 0x17c <FND_getFndDisplayData>
 1fe:	ec 01       	movw	r28, r24
	fndDigitPosition=(fndDigitPosition+1)%4; 
 200:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	83 70       	andi	r24, 0x03	; 3
 20a:	90 78       	andi	r25, 0x80	; 128
 20c:	99 23       	and	r25, r25
 20e:	24 f4       	brge	.+8      	; 0x218 <FND_ISR_Display+0x20>
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	8c 6f       	ori	r24, 0xFC	; 252
 214:	9f 6f       	ori	r25, 0xFF	; 255
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	FND_off();
 21c:	e7 df       	rcall	.-50     	; 0x1ec <FND_off>
	
	switch (fndDigitPosition)
 21e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	21 f1       	breq	.+72     	; 0x26e <FND_ISR_Display+0x76>
 226:	38 f0       	brcs	.+14     	; 0x236 <FND_ISR_Display+0x3e>
 228:	82 30       	cpi	r24, 0x02	; 2
 22a:	09 f4       	brne	.+2      	; 0x22e <FND_ISR_Display+0x36>
 22c:	45 c0       	rjmp	.+138    	; 0x2b8 <FND_ISR_Display+0xc0>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	09 f4       	brne	.+2      	; 0x234 <FND_ISR_Display+0x3c>
 232:	69 c0       	rjmp	.+210    	; 0x306 <FND_ISR_Display+0x10e>
 234:	94 c0       	rjmp	.+296    	; 0x35e <FND_ISR_Display+0x166>
	{	case 0:
		fnd_showNumber(displayData%10);
 236:	9e 01       	movw	r18, r28
 238:	ad ec       	ldi	r26, 0xCD	; 205
 23a:	bc ec       	ldi	r27, 0xCC	; 204
 23c:	26 d1       	rcall	.+588    	; 0x48a <__umulhisi3>
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	96 95       	lsr	r25
 248:	87 95       	ror	r24
 24a:	9c 01       	movw	r18, r24
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	82 0f       	add	r24, r18
 25e:	93 1f       	adc	r25, r19
 260:	2c 2f       	mov	r18, r28
 262:	28 1b       	sub	r18, r24
 264:	82 2f       	mov	r24, r18
		FND_selectDigit(FND_DIGIT_4);
 266:	9e df       	rcall	.-196    	; 0x1a4 <fnd_showNumber>
 268:	83 e0       	ldi	r24, 0x03	; 3
		break; 
 26a:	8d df       	rcall	.-230    	; 0x186 <FND_selectDigit>
		
		case 1:
		fnd_showNumber(displayData/10%10);
 26c:	78 c0       	rjmp	.+240    	; 0x35e <FND_ISR_Display+0x166>
 26e:	9e 01       	movw	r18, r28
 270:	ad ec       	ldi	r26, 0xCD	; 205
 272:	bc ec       	ldi	r27, 0xCC	; 204
 274:	0a d1       	rcall	.+532    	; 0x48a <__umulhisi3>
 276:	ac 01       	movw	r20, r24
 278:	56 95       	lsr	r21
 27a:	47 95       	ror	r20
 27c:	56 95       	lsr	r21
 27e:	47 95       	ror	r20
 280:	56 95       	lsr	r21
 282:	47 95       	ror	r20
 284:	9a 01       	movw	r18, r20
 286:	01 d1       	rcall	.+514    	; 0x48a <__umulhisi3>
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	9c 01       	movw	r18, r24
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	82 0f       	add	r24, r18
 2a8:	93 1f       	adc	r25, r19
 2aa:	24 2f       	mov	r18, r20
 2ac:	28 1b       	sub	r18, r24
 2ae:	82 2f       	mov	r24, r18
		FND_selectDigit(FND_DIGIT_3);
 2b0:	79 df       	rcall	.-270    	; 0x1a4 <fnd_showNumber>
 2b2:	82 e0       	ldi	r24, 0x02	; 2
		break;
 2b4:	68 df       	rcall	.-304    	; 0x186 <FND_selectDigit>
		
		case 2:
		fnd_showNumber(displayData/100%10);
 2b6:	53 c0       	rjmp	.+166    	; 0x35e <FND_ISR_Display+0x166>
 2b8:	9e 01       	movw	r18, r28
 2ba:	36 95       	lsr	r19
 2bc:	27 95       	ror	r18
 2be:	36 95       	lsr	r19
 2c0:	27 95       	ror	r18
 2c2:	ab e7       	ldi	r26, 0x7B	; 123
 2c4:	b4 e1       	ldi	r27, 0x14	; 20
 2c6:	e1 d0       	rcall	.+450    	; 0x48a <__umulhisi3>
 2c8:	ac 01       	movw	r20, r24
 2ca:	56 95       	lsr	r21
 2cc:	47 95       	ror	r20
 2ce:	9a 01       	movw	r18, r20
 2d0:	ad ec       	ldi	r26, 0xCD	; 205
 2d2:	bc ec       	ldi	r27, 0xCC	; 204
 2d4:	da d0       	rcall	.+436    	; 0x48a <__umulhisi3>
 2d6:	96 95       	lsr	r25
 2d8:	87 95       	ror	r24
 2da:	96 95       	lsr	r25
 2dc:	87 95       	ror	r24
 2de:	96 95       	lsr	r25
 2e0:	87 95       	ror	r24
 2e2:	9c 01       	movw	r18, r24
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	82 0f       	add	r24, r18
 2f6:	93 1f       	adc	r25, r19
 2f8:	24 2f       	mov	r18, r20
 2fa:	28 1b       	sub	r18, r24
 2fc:	82 2f       	mov	r24, r18
		FND_selectDigit(FND_DIGIT_2);
 2fe:	52 df       	rcall	.-348    	; 0x1a4 <fnd_showNumber>
 300:	81 e0       	ldi	r24, 0x01	; 1
		break;
 302:	41 df       	rcall	.-382    	; 0x186 <FND_selectDigit>
		
		case 3:
		fnd_showNumber(displayData/1000%10);
 304:	2c c0       	rjmp	.+88     	; 0x35e <FND_ISR_Display+0x166>
 306:	9e 01       	movw	r18, r28
 308:	36 95       	lsr	r19
 30a:	27 95       	ror	r18
 30c:	36 95       	lsr	r19
 30e:	27 95       	ror	r18
 310:	36 95       	lsr	r19
 312:	27 95       	ror	r18
 314:	a5 ec       	ldi	r26, 0xC5	; 197
 316:	b0 e2       	ldi	r27, 0x20	; 32
 318:	b8 d0       	rcall	.+368    	; 0x48a <__umulhisi3>
 31a:	ac 01       	movw	r20, r24
 31c:	52 95       	swap	r21
 31e:	42 95       	swap	r20
 320:	4f 70       	andi	r20, 0x0F	; 15
 322:	45 27       	eor	r20, r21
 324:	5f 70       	andi	r21, 0x0F	; 15
 326:	45 27       	eor	r20, r21
 328:	9a 01       	movw	r18, r20
 32a:	ad ec       	ldi	r26, 0xCD	; 205
 32c:	bc ec       	ldi	r27, 0xCC	; 204
 32e:	ad d0       	rcall	.+346    	; 0x48a <__umulhisi3>
 330:	96 95       	lsr	r25
 332:	87 95       	ror	r24
 334:	96 95       	lsr	r25
 336:	87 95       	ror	r24
 338:	96 95       	lsr	r25
 33a:	87 95       	ror	r24
 33c:	9c 01       	movw	r18, r24
 33e:	22 0f       	add	r18, r18
 340:	33 1f       	adc	r19, r19
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	82 0f       	add	r24, r18
 350:	93 1f       	adc	r25, r19
 352:	24 2f       	mov	r18, r20
 354:	28 1b       	sub	r18, r24
 356:	82 2f       	mov	r24, r18
		FND_selectDigit(FND_DIGIT_1);
 358:	25 df       	rcall	.-438    	; 0x1a4 <fnd_showNumber>
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	14 df       	rcall	.-472    	; 0x186 <FND_selectDigit>
		break;
	}
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <__vector_16>:
#include "interrupt.h"
#include <avr/interrupt.h>
#include <util/delay.h>

enum{STOP,RUN,RESET}; // 0, 1, 2   // enum 의 초기값이 없으면 0부터~
ISR(TIMER0_OVF_vect) { FND_ISR_Display(); TCNT0=6; }
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	0b b6       	in	r0, 0x3b	; 59
 370:	0f 92       	push	r0
 372:	2f 93       	push	r18
 374:	3f 93       	push	r19
 376:	4f 93       	push	r20
 378:	5f 93       	push	r21
 37a:	6f 93       	push	r22
 37c:	7f 93       	push	r23
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	af 93       	push	r26
 384:	bf 93       	push	r27
 386:	ef 93       	push	r30
 388:	ff 93       	push	r31
 38a:	36 df       	rcall	.-404    	; 0x1f8 <FND_ISR_Display>
 38c:	86 e0       	ldi	r24, 0x06	; 6
 38e:	82 bf       	out	0x32, r24	; 50
 390:	ff 91       	pop	r31
 392:	ef 91       	pop	r30
 394:	bf 91       	pop	r27
 396:	af 91       	pop	r26
 398:	9f 91       	pop	r25
 39a:	8f 91       	pop	r24
 39c:	7f 91       	pop	r23
 39e:	6f 91       	pop	r22
 3a0:	5f 91       	pop	r21
 3a2:	4f 91       	pop	r20
 3a4:	3f 91       	pop	r19
 3a6:	2f 91       	pop	r18
 3a8:	0f 90       	pop	r0
 3aa:	0b be       	out	0x3b, r0	; 59
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <main>:

int main(void)
{	FND_Init();
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	cd b7       	in	r28, 0x3d	; 61
 3bc:	de b7       	in	r29, 0x3e	; 62
 3be:	2c 97       	sbiw	r28, 0x0c	; 12
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	f8 94       	cli
 3c4:	de bf       	out	0x3e, r29	; 62
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	cd bf       	out	0x3d, r28	; 61
 3ca:	c5 de       	rcall	.-630    	; 0x156 <FND_Init>
	TCCR0|=(1<<CS02)|(0<<CS01)|(0<<CS00);  //64분주   1/64 prescaler
 3cc:	83 b7       	in	r24, 0x33	; 51
 3ce:	84 60       	ori	r24, 0x04	; 4
 3d0:	83 bf       	out	0x33, r24	; 51
	TIMSK|=(1<<TOIE0);  //타이머 카운트 오버플로우 enable
 3d2:	87 b7       	in	r24, 0x37	; 55
 3d4:	81 60       	ori	r24, 0x01	; 1
 3d6:	87 bf       	out	0x37, r24	; 55
	TCNT0=6; //1ms만들기 위해
 3d8:	86 e0       	ldi	r24, 0x06	; 6
 3da:	82 bf       	out	0x32, r24	; 50
	sei();
 3dc:	78 94       	sei
	uint16_t counter=0;
	uint8_t counterState=STOP; // counterState = 0 
	Button btnRunStop;
	Button btnReset;
	// Button_init(Button *button, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
	Button_init(&btnRunStop, &BUTTON_DDR, &BUTTON_PIN,0); 
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	49 e3       	ldi	r20, 0x39	; 57
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	6a e3       	ldi	r22, 0x3A	; 58
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	ce 01       	movw	r24, r28
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	6d de       	rcall	.-806    	; 0xc8 <Button_init>
	 // Button_init(Button &btnReset, volatile uint8_t &DDRA, volatile uint8_t &PINA, uint8_t 1)
	Button_init(&btnReset, &BUTTON_DDR, &BUTTON_PIN,1);
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	49 e3       	ldi	r20, 0x39	; 57
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	6a e3       	ldi	r22, 0x3A	; 58
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	ce 01       	movw	r24, r28
 3fa:	07 96       	adiw	r24, 0x07	; 7
 3fc:	65 de       	rcall	.-822    	; 0xc8 <Button_init>
	TCCR0|=(1<<CS02)|(0<<CS01)|(0<<CS00);  //64분주   1/64 prescaler
	TIMSK|=(1<<TOIE0);  //타이머 카운트 오버플로우 enable
	TCNT0=6; //1ms만들기 위해
	sei();
	uint16_t counter=0;
	uint8_t counterState=STOP; // counterState = 0 
 3fe:	10 e0       	ldi	r17, 0x00	; 0
{	FND_Init();
	TCCR0|=(1<<CS02)|(0<<CS01)|(0<<CS00);  //64분주   1/64 prescaler
	TIMSK|=(1<<TOIE0);  //타이머 카운트 오버플로우 enable
	TCNT0=6; //1ms만들기 위해
	sei();
	uint16_t counter=0;
 400:	e1 2c       	mov	r14, r1
 402:	f1 2c       	mov	r15, r1
	// Button_init(Button *button, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
	Button_init(&btnRunStop, &BUTTON_DDR, &BUTTON_PIN,0); 
	 // Button_init(Button &btnReset, volatile uint8_t &DDRA, volatile uint8_t &PINA, uint8_t 1)
	Button_init(&btnReset, &BUTTON_DDR, &BUTTON_PIN,1);
	 while (1)
    {	switch(counterState) //	★ 1. 버튼 상황에 따른 로직의 case STOP, case RUN 
 404:	11 23       	and	r17, r17
 406:	19 f0       	breq	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 408:	11 30       	cpi	r17, 0x01	; 1
 40a:	61 f0       	breq	.+24     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		{	case STOP: //  case STOP 숫자멈춰있는상태 --> RUN(같은스위치 PUSH할때) 또는 RESET(옆에스위치 PUSH할때)
				if(BUTTON_fetState(&btnRunStop)==ACT_PUSH) { counterState=RUN; }
 40c:	1d c0       	rjmp	.+58     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 40e:	ce 01       	movw	r24, r28
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	6f de       	rcall	.-802    	; 0xf2 <BUTTON_fetState>
 414:	81 30       	cpi	r24, 0x01	; 1
				else if(BUTTON_fetState(&btnReset)==ACT_PUSH) { counterState=RESET; }
 416:	89 f0       	breq	.+34     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 418:	ce 01       	movw	r24, r28
 41a:	07 96       	adiw	r24, 0x07	; 7
 41c:	6a de       	rcall	.-812    	; 0xf2 <BUTTON_fetState>
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	99 f4       	brne	.+38     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			break; 
			case RUN: //case RUN 숫자증가하는 변화상태--> STOP(같은스위치 PUSH할때) 또는 RESET(옆에스위치 PUSH할때)
				if(BUTTON_fetState(&btnRunStop)==ACT_PUSH) { counterState=STOP;}
 422:	0d c0       	rjmp	.+26     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 424:	ce 01       	movw	r24, r28
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	64 de       	rcall	.-824    	; 0xf2 <BUTTON_fetState>
 42a:	81 30       	cpi	r24, 0x01	; 1
				else if(BUTTON_fetState(&btnReset)==ACT_PUSH) { counterState=RESET; }		
 42c:	51 f0       	breq	.+20     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 42e:	ce 01       	movw	r24, r28
 430:	07 96       	adiw	r24, 0x07	; 7
 432:	5f de       	rcall	.-834    	; 0xf2 <BUTTON_fetState>
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	41 f4       	brne	.+16     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 438:	06 c0       	rjmp	.+12     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	 // Button_init(Button &btnReset, volatile uint8_t &DDRA, volatile uint8_t &PINA, uint8_t 1)
	Button_init(&btnReset, &BUTTON_DDR, &BUTTON_PIN,1);
	 while (1)
    {	switch(counterState) //	★ 1. 버튼 상황에 따른 로직의 case STOP, case RUN 
		{	case STOP: //  case STOP 숫자멈춰있는상태 --> RUN(같은스위치 PUSH할때) 또는 RESET(옆에스위치 PUSH할때)
				if(BUTTON_fetState(&btnRunStop)==ACT_PUSH) { counterState=RUN; }
 43a:	11 e0       	ldi	r17, 0x01	; 1
 43c:	05 c0       	rjmp	.+10     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
				else if(BUTTON_fetState(&btnReset)==ACT_PUSH) { counterState=RESET; }
 43e:	12 e0       	ldi	r17, 0x02	; 2
 440:	03 c0       	rjmp	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			break; 
			case RUN: //case RUN 숫자증가하는 변화상태--> STOP(같은스위치 PUSH할때) 또는 RESET(옆에스위치 PUSH할때)
				if(BUTTON_fetState(&btnRunStop)==ACT_PUSH) { counterState=STOP;}
 442:	10 e0       	ldi	r17, 0x00	; 0
 444:	01 c0       	rjmp	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
				else if(BUTTON_fetState(&btnReset)==ACT_PUSH) { counterState=RESET; }		
 446:	12 e0       	ldi	r17, 0x02	; 2
		}		
		switch(counterState) // ★ 2, FND 숫자디스플레이 상황에 따른 로직 case STOP,  case RUN , case RESET
 448:	11 30       	cpi	r17, 0x01	; 1
 44a:	39 f0       	breq	.+14     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 44c:	18 f0       	brcs	.+6      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 44e:	12 30       	cpi	r17, 0x02	; 2
 450:	a9 f0       	breq	.+42     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		{   case STOP: FND_setFndDisplayData(counter); // 숫자화면 멈춤
 452:	d8 cf       	rjmp	.-80     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 454:	c7 01       	movw	r24, r14
			break; 
 456:	87 de       	rcall	.-754    	; 0x166 <FND_setFndDisplayData>
			
			case RUN: FND_setFndDisplayData(counter++);  _delay_ms(100); // 숫자화면 증가중, 대기시간 100ms
 458:	d5 cf       	rjmp	.-86     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 45a:	67 01       	movw	r12, r14
 45c:	2f ef       	ldi	r18, 0xFF	; 255
 45e:	c2 1a       	sub	r12, r18
 460:	d2 0a       	sbc	r13, r18
 462:	c7 01       	movw	r24, r14
 464:	80 de       	rcall	.-768    	; 0x166 <FND_setFndDisplayData>
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	91 ee       	ldi	r25, 0xE1	; 225
 46a:	24 e0       	ldi	r18, 0x04	; 4
 46c:	81 50       	subi	r24, 0x01	; 1
 46e:	90 40       	sbci	r25, 0x00	; 0
 470:	20 40       	sbci	r18, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 474:	00 c0       	rjmp	.+0      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 476:	00 00       	nop
 478:	76 01       	movw	r14, r12
			break;
			
			case RESET:  counter=0;  FND_setFndDisplayData(counter);  counterState=STOP; // 숫자화면 0 으로 리셋, STOP상태로 리셋
 47a:	c4 cf       	rjmp	.-120    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	72 de       	rcall	.-796    	; 0x166 <FND_setFndDisplayData>
 482:	10 e0       	ldi	r17, 0x00	; 0
 484:	e1 2c       	mov	r14, r1
 486:	f1 2c       	mov	r15, r1
			break;	
 488:	bd cf       	rjmp	.-134    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

0000048a <__umulhisi3>:
 48a:	a2 9f       	mul	r26, r18
 48c:	b0 01       	movw	r22, r0
 48e:	b3 9f       	mul	r27, r19
 490:	c0 01       	movw	r24, r0
 492:	a3 9f       	mul	r26, r19
 494:	70 0d       	add	r23, r0
 496:	81 1d       	adc	r24, r1
 498:	11 24       	eor	r1, r1
 49a:	91 1d       	adc	r25, r1
 49c:	b2 9f       	mul	r27, r18
 49e:	70 0d       	add	r23, r0
 4a0:	81 1d       	adc	r24, r1
 4a2:	11 24       	eor	r1, r1
 4a4:	91 1d       	adc	r25, r1
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>

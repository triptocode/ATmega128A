
230814_Arduino+test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000000ea  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b6  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000799  00000000  00000000  00000af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000384  00000000  00000000  0000128b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001610  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d1  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001b31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  8e:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ledInit>:

void GPIO_Output(uint8_t data){
	LED_PORT = data;
}
void ledInit(){
	LED_DDR = 0xff;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a b9       	out	0x0a, r24	; 10
  9a:	08 95       	ret

0000009c <main>:

int seg[10]={0xFC, 0x60, 0xDA, 0xF2,  0x66, 
			0xB6, 0xBE, 0xE4, 0xFE, 0xE6 };
	
int main(void){
	ledInit();
  9c:	0e 94 4b 00 	call	0x96	; 0x96 <ledInit>
	while(1){
		for (int i=0; i<10; i++)
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	12 c0       	rjmp	.+36     	; 0xca <main+0x2e>
		{
			LED_PORT = ~seg[i];
  a6:	fc 01       	movw	r30, r24
  a8:	ee 0f       	add	r30, r30
  aa:	ff 1f       	adc	r31, r31
  ac:	e0 50       	subi	r30, 0x00	; 0
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	20 81       	ld	r18, Z
  b2:	20 95       	com	r18
  b4:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	39 e6       	ldi	r19, 0x69	; 105
  ba:	48 e1       	ldi	r20, 0x18	; 24
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	30 40       	sbci	r19, 0x00	; 0
  c0:	40 40       	sbci	r20, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x20>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x2a>
  c6:	00 00       	nop
			0xB6, 0xBE, 0xE4, 0xFE, 0xE6 };
	
int main(void){
	ledInit();
	while(1){
		for (int i=0; i<10; i++)
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	8a 30       	cpi	r24, 0x0A	; 10
  cc:	91 05       	cpc	r25, r1
  ce:	5c f3       	brlt	.-42     	; 0xa6 <main+0xa>
		{
			LED_PORT = ~seg[i];
			_delay_ms(500);
		}
		LED_PORT =0x00;
  d0:	1b b8       	out	0x0b, r1	; 11
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	9b e7       	ldi	r25, 0x7B	; 123
  d6:	22 e9       	ldi	r18, 0x92	; 146
  d8:	81 50       	subi	r24, 0x01	; 1
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	20 40       	sbci	r18, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x3c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x46>
  e2:	00 00       	nop
  e4:	dd cf       	rjmp	.-70     	; 0xa0 <main+0x4>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

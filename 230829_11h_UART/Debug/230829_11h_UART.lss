
230829_11h_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000882  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d2  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000289  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ed  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000018f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	19 d0       	rcall	.+50     	; 0xcc <main>
  9a:	1c c0       	rjmp	.+56     	; 0xd4 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <UART0_init>:
void UART0_transmit(char data);
unsigned UART0_receive(void);

void UART0_init()
{
	UBRR0H = 0x00; 
  9e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207; // 9600bps 설정
  a2:	8f ec       	ldi	r24, 0xCF	; 207
  a4:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A |= (1<<U2X0); // 2배속모드/ 데이터 시트 좌에 상단 핀2개있는 부분 (=1A가됨) 쓸거니까 // UCSR1A 쓰면 2배속? 
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8b b9       	out	0x0b, r24	; 11
	// 비동기, 8비트 데이터, 패리티없음 , 1비트 정지모드
	// UCSR0C = 0x06; // 초기값 써줘도 되고 안써도되고
	
	UCSR0B |= (1<<RXEN0); // 수신 가능
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1<<TXEN0); // 송신 가능
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	8a b9       	out	0x0a, r24	; 10
  b8:	08 95       	ret

000000ba <UART0_transmit>:
}

void UART0_transmit(char data) // // RXC0이나온 이유: 수신할 문제가 있으면 1 / 1&1이면 1인데 반전!을 걸었으니  0이 될때 하단 줄이 실행됨 
{	
	while(!(UCSR0A &(1<<UDRE0))); //  송신 가능대기, UDR이 비어있는지  .. 비어있으면 이 줄에서 돌다가... 비어있지 않으면 다음줄? 진행
  ba:	5d 9b       	sbis	0x0b, 5	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <UART0_transmit>
	UDR0 =data; // 데이터전송 
  be:	8c b9       	out	0x0c, r24	; 12
  c0:	08 95       	ret

000000c2 <UART0_receive>:
}

unsigned UART0_receive(void)
{
	while(!(UCSR0A &(1<<RXC0))); // 데이터 수신 대기
  c2:	5f 9b       	sbis	0x0b, 7	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <UART0_receive>
	return UDR0;
  c6:	8c b1       	in	r24, 0x0c	; 12
}
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	08 95       	ret

000000cc <main>:

int main(void)
{
	UART0_init(); //0번 UART --> Initialize
  cc:	e8 df       	rcall	.-48     	; 0x9e <UART0_init>
	
    while (1) 
    { UART0_transmit(UART0_receive());
  ce:	f9 df       	rcall	.-14     	; 0xc2 <UART0_receive>
  d0:	f4 df       	rcall	.-24     	; 0xba <UART0_transmit>
  d2:	fd cf       	rjmp	.-6      	; 0xce <main+0x2>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>


230816_7_segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000000f4  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077a  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a6  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000298  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000397  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  0000167f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000170f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

static int seg_num[10]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x6F };
	
int main(void)
{
    LED_DDR = 0xff;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 b9       	out	0x04, r24	; 4
	NUM_DDR = 0xff;
  9a:	8a b9       	out	0x0a, r24	; 10
		//
		//num ++;
		//if (num>10000) num=0;
		
		// 자리수 별 출력 보기용
		for (int j=0; j<4;j++)
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	23 c0       	rjmp	.+70     	; 0xe8 <main+0x52>
		{
			LED_PORT = ~(0x01<<j);
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	04 2e       	mov	r0, r20
  a8:	02 c0       	rjmp	.+4      	; 0xae <main+0x18>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	0a 94       	dec	r0
  b0:	e2 f7       	brpl	.-8      	; 0xaa <main+0x14>
  b2:	80 95       	com	r24
  b4:	85 b9       	out	0x05, r24	; 5
			for (int i=0; i<10; i++)
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	11 c0       	rjmp	.+34     	; 0xde <main+0x48>
			{
				NUM_PORT = seg_num[i];
  bc:	fc 01       	movw	r30, r24
  be:	ee 0f       	add	r30, r30
  c0:	ff 1f       	adc	r31, r31
  c2:	e0 50       	subi	r30, 0x00	; 0
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	20 81       	ld	r18, Z
  c8:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	35 ea       	ldi	r19, 0xA5	; 165
  ce:	6e e0       	ldi	r22, 0x0E	; 14
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	30 40       	sbci	r19, 0x00	; 0
  d4:	60 40       	sbci	r22, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x3a>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x44>
  da:	00 00       	nop
		
		// 자리수 별 출력 보기용
		for (int j=0; j<4;j++)
		{
			LED_PORT = ~(0x01<<j);
			for (int i=0; i<10; i++)
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	8a 30       	cpi	r24, 0x0A	; 10
  e0:	91 05       	cpc	r25, r1
  e2:	64 f3       	brlt	.-40     	; 0xbc <main+0x26>
		//
		//num ++;
		//if (num>10000) num=0;
		
		// 자리수 별 출력 보기용
		for (int j=0; j<4;j++)
  e4:	4f 5f       	subi	r20, 0xFF	; 255
  e6:	5f 4f       	sbci	r21, 0xFF	; 255
  e8:	44 30       	cpi	r20, 0x04	; 4
  ea:	51 05       	cpc	r21, r1
  ec:	d4 f2       	brlt	.-76     	; 0xa2 <main+0xc>
  ee:	d6 cf       	rjmp	.-84     	; 0x9c <main+0x6>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>

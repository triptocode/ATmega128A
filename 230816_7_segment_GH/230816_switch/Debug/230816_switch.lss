
230816_switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007dc  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e1  00000000  00000000  0000106e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a4  00000000  00000000  00001706  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include <stdio.h>

int main(void)
{
	DDRD = 0xff;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x00;
  84:	14 b8       	out	0x04, r1	; 4
	
	uint8_t ledData = 0x01;
	uint8_t buttondata;			// 버튼 입력 시 값
	int flag = 0;
	PORTD = 0x00;				// LOW 상태로 시작
  86:	1b b8       	out	0x0b, r1	; 11
	DDRD = 0xff;
	DDRB = 0x00;
	
	uint8_t ledData = 0x01;
	uint8_t buttondata;			// 버튼 입력 시 값
	int flag = 0;
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
int main(void)
{
	DDRD = 0xff;
	DDRB = 0x00;
	
	uint8_t ledData = 0x01;
  8c:	91 e0       	ldi	r25, 0x01	; 1
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x14>
			_delay_ms(200);
			PORTD = 0x00;
			_delay_ms(200);
			if((buttondata&(1<<3)) == 0)
			{
				flag = 0;
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	30 e0       	ldi	r19, 0x00	; 0
	int flag = 0;
	PORTD = 0x00;				// LOW 상태로 시작
	
	while (1)
	{		
		buttondata = PINB;
  94:	83 b1       	in	r24, 0x03	; 3
		if((buttondata&(1<<0)) == 0)
  96:	80 fd       	sbrc	r24, 0
  98:	12 c0       	rjmp	.+36     	; 0xbe <main+0x3e>
		{
			PORTD = ledData;
  9a:	9b b9       	out	0x0b, r25	; 11
			ledData = (ledData>>7)|(ledData<<1);
  9c:	49 2f       	mov	r20, r25
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	44 0f       	add	r20, r20
  a2:	55 1f       	adc	r21, r21
  a4:	99 1f       	adc	r25, r25
  a6:	99 27       	eor	r25, r25
  a8:	99 1f       	adc	r25, r25
  aa:	94 2b       	or	r25, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	4f ef       	ldi	r20, 0xFF	; 255
  ae:	51 ee       	ldi	r21, 0xE1	; 225
  b0:	64 e0       	ldi	r22, 0x04	; 4
  b2:	41 50       	subi	r20, 0x01	; 1
  b4:	50 40       	sbci	r21, 0x00	; 0
  b6:	60 40       	sbci	r22, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
			_delay_ms(100);
		}
		
		if((buttondata&(1<<1)) == 0)
  be:	81 fd       	sbrc	r24, 1
  c0:	10 c0       	rjmp	.+32     	; 0xe2 <main+0x62>
		{
			PORTD = ledData;
  c2:	9b b9       	out	0x0b, r25	; 11
			ledData = (ledData>>1)|(ledData<<7);
  c4:	60 e8       	ldi	r22, 0x80	; 128
  c6:	96 9f       	mul	r25, r22
  c8:	a0 01       	movw	r20, r0
  ca:	11 24       	eor	r1, r1
  cc:	96 95       	lsr	r25
  ce:	94 2b       	or	r25, r20
  d0:	4f ef       	ldi	r20, 0xFF	; 255
  d2:	51 ee       	ldi	r21, 0xE1	; 225
  d4:	64 e0       	ldi	r22, 0x04	; 4
  d6:	41 50       	subi	r20, 0x01	; 1
  d8:	50 40       	sbci	r21, 0x00	; 0
  da:	60 40       	sbci	r22, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x56>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x60>
  e0:	00 00       	nop
			_delay_ms(100);
		}
		
		if((buttondata&(1<<2)) == 0)
  e2:	82 fd       	sbrc	r24, 2
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0x6a>
		{
			flag = 1;
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
		}
		
		if ((buttondata & (1<<3))==0)
  ea:	48 2f       	mov	r20, r24
  ec:	48 70       	andi	r20, 0x08	; 8
  ee:	83 ff       	sbrs	r24, 3
		{
			PORTD = 0x00;
  f0:	1b b8       	out	0x0b, r1	; 11
		}		
		if(flag == 1)
  f2:	21 30       	cpi	r18, 0x01	; 1
  f4:	31 05       	cpc	r19, r1
  f6:	71 f6       	brne	.-100    	; 0x94 <main+0x14>
		{
			PORTD = 0xff;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	53 ec       	ldi	r21, 0xC3	; 195
 100:	69 e0       	ldi	r22, 0x09	; 9
 102:	81 50       	subi	r24, 0x01	; 1
 104:	50 40       	sbci	r21, 0x00	; 0
 106:	60 40       	sbci	r22, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x82>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x8c>
 10c:	00 00       	nop
			_delay_ms(200);
			PORTD = 0x00;
 10e:	1b b8       	out	0x0b, r1	; 11
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	53 ec       	ldi	r21, 0xC3	; 195
 114:	69 e0       	ldi	r22, 0x09	; 9
 116:	81 50       	subi	r24, 0x01	; 1
 118:	50 40       	sbci	r21, 0x00	; 0
 11a:	60 40       	sbci	r22, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x96>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0xa0>
 120:	00 00       	nop
			_delay_ms(200);
			if((buttondata&(1<<3)) == 0)
 122:	44 23       	and	r20, r20
 124:	09 f4       	brne	.+2      	; 0x128 <main+0xa8>
 126:	b4 cf       	rjmp	.-152    	; 0x90 <main+0x10>
 128:	b5 cf       	rjmp	.-150    	; 0x94 <main+0x14>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>

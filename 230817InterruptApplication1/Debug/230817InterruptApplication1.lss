
230817InterruptApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000834  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000786  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000261  00000000  00000000  000011ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e2  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__vector_5>
  16:	00 00       	nop
  18:	54 c0       	rjmp	.+168    	; 0xc2 <__vector_6>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	26 d0       	rcall	.+76     	; 0xe6 <main>
  9a:	35 c0       	rjmp	.+106    	; 0x106 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <__vector_5>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR(INT4_vect) // 4번핀(INT4)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
	PORTD ^=(1<<0); // 0번핀
  ac:	92 b3       	in	r25, 0x12	; 18
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	89 27       	eor	r24, r25
  b2:	82 bb       	out	0x12, r24	; 18
}
  b4:	9f 91       	pop	r25
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <__vector_6>:
ISR(INT5_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	PORTD ^=(1<<1);  // 1번핀
  d0:	92 b3       	in	r25, 0x12	; 18
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	89 27       	eor	r24, r25
  d6:	82 bb       	out	0x12, r24	; 18
}
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <main>:
int main(void)
{
	// 외부 인터럽트 INT4(PE4), INT5(PE5)
	
	// INT4번이 falling edge 일때 인터럽트 발생  (버튼을눌렀을때 발생?)  -> 버튼 눌릴때
	EICRB |= (1<<ISC41) | (0<<ISC40); // | (0<<ISC40);는 0이라 안써줘도 되는데 볼때 일관성 때문에 작성함 
  e6:	8a b7       	in	r24, 0x3a	; 58
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	8a bf       	out	0x3a, r24	; 58
	
	// INT5번이 rising edge 일때 인터럽트 발생  -> 버튼 놓을때
	EICRB |= (1<<ISC51) | (1<<ISC50);
  ec:	8a b7       	in	r24, 0x3a	; 58
  ee:	8c 60       	ori	r24, 0x0C	; 12
  f0:	8a bf       	out	0x3a, r24	; 58
	
	//INT4, INT5 쓸거라고 셋팅
	EICRB |= (1<<INT5) | (1<<INT4);  // 첫째) 비트 1을 좌측으로 5자리만큼 위치시켜 놓기. 0000 0000 -> 0010 0000, 둘째)비트1을 좌측으로 4자리만큼 위치시켜 놓기. 0000 0000 -> 0010 0000, 셋째) 합친연산은 0011 0000
  f2:	8a b7       	in	r24, 0x3a	; 58
  f4:	80 63       	ori	r24, 0x30	; 48
  f6:	8a bf       	out	0x3a, r24	; 58
	 
	DDRE &=~((1<<DDRE4) | ~(1<<DDRE5)); // 입력으로 세팅 (버튼)
  f8:	82 b1       	in	r24, 0x02	; 2
  fa:	80 72       	andi	r24, 0x20	; 32
  fc:	82 b9       	out	0x02, r24	; 2

	DDRD =0xff; // LED포트 
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	81 bb       	out	0x11, r24	; 17
	
	sei(); // 외부 인터럽트 활성화 
 102:	78 94       	sei
 104:	ff cf       	rjmp	.-2      	; 0x104 <main+0x1e>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
